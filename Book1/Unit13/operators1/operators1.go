// operators
package main

import "fmt"

func main() {
	fmt.Println("Operators\n")

	// 1) =(대입) 변수나 상수에 값을 대입, 변수는 변수끼리 대입 가능
	var a1 int = 1
	var b1 int = 2
	var c1 int = 3
	const d1 string = "Hello, world!"
	fmt.Printf("a1 : %d\n", a1)
	fmt.Printf("b1 : %d\n", b1)
	fmt.Printf("c1 : %d\n", c1)
	fmt.Println("d1 : " + d1 + "\n")

	// 2) :=(변수 선언 및 대입) 변수를 선언하는 동시에 값을 대입
	a2 := 1               // int
	b2 := 3.5             // float64
	c2 := "Hello, world!" // string
	fmt.Printf("a2 : %d\n", a2)
	fmt.Printf("b2 : %.1f\n", b2)
	fmt.Println("c2 : " + c2 + "\n")

	// 3) +(덧셈) 두 값을 더함, 사용할 수 있는 자료형은 정수, 실수, 복소수, 문자열
	a3 := 1 + 2                // 3 : 두 정수 더하기
	b3 := 2 + 3                // 5 : 두 정수 더하기
	c3 := a3 + b3              // 8 : 두 변수 더하기
	d3 := "Hello, " + "world!" // Hello, world! : 두 문자열 붙이기
	fmt.Printf("a3 : 1 + 2 = %d\n", a3)
	fmt.Printf("b3 : 2 + 3 = %d\n", b3)
	fmt.Printf("c3 : a3 + b3 = %d\n", c3)
	fmt.Println("d3 : " + d3 + "\n")

	// 4) -(뺄셈) 두 값의 차이를 구함, 사용할 수 있는 자료형은 정수, 실수, 복소수
	a4 := 3 - 2   // 1 : 두 정수 빼기
	b4 := 4 - 5   // -1 : 두 정수 빼기
	c4 := a4 - b4 // 2 : 두 변수 빼기
	fmt.Printf("a4 : 3 - 2 = %d\n", a4)
	fmt.Printf("b4 : 2 - 3 = %d\n", b4)
	fmt.Printf("c4 : a4 - b4 = %d\n\n", c4)

	// 5) *(곱셈) 두 값을 곱함, 사용할 수 있는 자료형은 정수, 실수, 복소수
	a5 := 2 * 3   // 6 : 두 정수 곱하기
	b5 := 9 * 21  // 189 : 두 정수 곱하기
	c5 := a5 * b5 // 1134 : 두 변수 곱하기
	fmt.Printf("a5 : 2 * 3 = %d\n", a5)
	fmt.Printf("b5 : 9 * 21 = %d\n", b5)
	fmt.Printf("c5 : a5 * b5 = %d\n\n", c5)

	// 6) /(나눗셈) 두 값을 나눔, 사용할 수 있는 자료형은 정수, 실수, 복소수
	a6 := 5 / 2   // 2 : 두 정수 나누기
	b6 := 12 / 4  // 3 : 두 정수 나누기
	c6 := a6 / b6 // 0 : 두 변수 나누기
	fmt.Printf("a6 : 5 / 2 = %d\n", a6)
	fmt.Printf("b6 : 12 / 4 = %d\n", b6)
	fmt.Printf("c6 : a6 / b6 = %d\n\n", c6)

	// 7) %(나머지) 두 값을 나눈 뒤 나머지를 구함, 사용할 수 있는 자료형은 정수
	a7 := 5 % 2 // 1 : 5를 2로 나누었을 때 나머지
	fmt.Printf("a7 : 5 %% 2 = %d\n\n", a7)

	// 8) +=(덧셈 후 대입) 현재 변수와 값을 더한 다음 다시 변수에 대입, 문자열은 현재 변수에 문자열을 붙인 다음 다시 변수에 대입
	a8 := 5 // 5
	fmt.Printf("a8 = %d\n", a8)
	a8 += 2 // 7 : a에 2를 더한 후 대입
	fmt.Printf("a8 += 2\n=> a8 = %d\n\n", a8)

	// 9) -=(뺄셈 후 대입) 현재 변수에서 값을 뺀 다음 다시 변수에 대입
	a9 := 5 // 5
	fmt.Printf("a9 = %d\n", a9)
	a9 -= 2 // 3 : a에서 2를 뺀 후 대입
	fmt.Printf("a9 -= 2\n=> a9 = %d\n\n", a9)

	// 10) *=(곱셈 후 대입) 현재 변수와 값을 곱한 다음 다시 변수에 대입
	a10 := 5 // 5
	fmt.Printf("a10 = %d\n", a10)
	a10 *= 2 // 10 : a에 2를 곱한 후 대입
	fmt.Printf("a10 *= 2\n=> a10 = %d\n\n", a10)

	// 11) /=(나눗셈 후 대입) 현재 변수를 값으로 나눈 후 다시 변수에 대입
	a11 := 5 // 5
	fmt.Printf("a11 = %d\n", a11)
	a11 /= 2 // 2 : a를 2로 나눈 후 대입
	fmt.Printf("a11 /= 2\n=> a11 = %d\n\n", a11)

	// 12) %=(나머지를 구한 후 대입) 현재 변수와 값의 나머지를 구한 다음 다시 변수에 대입
	a12 := 5 // 5
	fmt.Printf("a12 = %d\n", a12)
	a12 %= 2 // 1 : a를 2로 나눈 후 나머지를 대입
	fmt.Printf("a12 %%= 2\n=> a12 = %d\n\n", a12)

	// 13) &(AND 비트 연산) 두 값을 비트 단위로 AND 연산, 사용할 수 있는 자료형은 정수
	a13 := 3         // 00000011
	b13 := 2         // 00000010
	c13 := a13 & b13 // 00000010 : a13과 b13의 AND 비트 연산
	fmt.Printf("a13 = %d (%08b)\n", a13, a13)
	fmt.Printf("b13 = %d (%08b)\n", b13, b13)
	fmt.Printf("c13 : a13 & b13 = %d (%08b)\n\n", c13, c13)

	// 14) |(OR 비트 연산) 두 값을 비트 단위로 OR 연산, 사용할 수 있는 자료형은 정수
	a14 := 3         // 00000011
	b14 := 2         // 00000010
	c14 := a14 | b14 // 00000011 : a14와 b14의 OR 비트 연산
	fmt.Printf("a14 = %d (%08b)\n", a14, a14)
	fmt.Printf("b14 = %d (%08b)\n", b14, b14)
	fmt.Printf("c14 : a14 | b14 = %d (%08b)\n\n", c14, c14)

	// 15) ^(XOR 비트 연산) 두 값을 비트 단위로 XOR 연산, 사용할 수 있는 자료형은 정수
	a15 := 3         // 00000011
	b15 := 2         // 00000010
	c15 := a15 ^ b15 // 00000001 : a15와 b15의 XOR 비트 연산
	fmt.Printf("a15 = %d (%08b)\n", a15, a15)
	fmt.Printf("b15 = %d (%08b)\n", b15, b15)
	fmt.Printf("c15 : a15 ^ b15 = %d (%08b)\n\n", c15, c15)

	// 16) &^(AND NOT 비트 연산) 두 값을 비트 단위로 AND NOT 연산(특정비트를 끔), 사용할 수 있는 자료형은 정수
	a16 := 255        // 11111111
	b16 := 68         // 01000100
	c16 := a16 &^ b16 // 10111011 : a16과 b16의 AND NOT 비트 연산
	fmt.Printf("a16 = %d (%08b)\n", a16, a16)
	fmt.Printf("b16 = %d (%08b)\n", b16, b16)
	fmt.Printf("c16 : a16 &^ b16 = %d (%08b)\n\n", c16, c16)

	// 17) &=(AND 비트 연산 후 대입) 현재 변수를 값으로 AND 연산한 다음 다시 변수에 대입
	a17 := 3 // 00000011
	fmt.Printf("a17 = %d (%08b)\n", a17, a17)
	b17 := 2 // 00000010
	fmt.Printf("b17 = %d (%08b)\n", b17, b17)
	a17 &= b17 // 00000010 : a17과 b17을 AND 비트 연산 후 a17에 대입
	fmt.Printf("a17 &= b17\n=> a17 = %d (%08b)\n\n", a17, a17)

	// 18) |=(OR 비트 연산 후 대입) 현재 변수를 값으로 OR 연산한 다음 다시 변수에 대입
	a18 := 3 // 00000011
	fmt.Printf("a18 = %d (%08b)\n", a18, a18)
	b18 := 2 // 00000010
	fmt.Printf("b18 = %d (%08b)\n", b18, b18)
	a18 |= b18 // 00000011 : a18과 b18을 OR 비트 연산 후 a18에 대입
	fmt.Printf("a18 |= b18\n=> a18 = %d (%08b)\n\n", a18, a18)

	// 19) ^=(XOR 비트 연산 후 대입) 현재 변수를 값으로 XOR 연산한 다음 다시 변수에 대입
	a19 := 3 // 00000011
	fmt.Printf("a19 = %d (%08b)\n", a19, a19)
	b19 := 2 // 00000010
	fmt.Printf("b19 = %d (%08b)\n", b19, b19)
	a19 ^= b19 // 00000001 : a19와 b19을 OR 비트 연산 후 a19에 대입
	fmt.Printf("a19 ^= b19\n=> a19 = %d (%08b)\n\n", a19, a19)

	// 20) &^=(AND NOT 비트 연산 후 대입) 현재 변수를 값으로 AND NOT 연산한 다음 다시 변수에 대입(특정 플래그를 끌 때 주로 사용)
	a20 := 255 // 11111111
	fmt.Printf("a20 = %d (%08b)\n", a20, a20)
	b20 := 68 // 01000100
	fmt.Printf("b20 = %d (%08b)\n", b20, b20)
	a20 &^= b20 // 10111011 : a20과 b20의 AND NOT 비트 연산
	fmt.Printf("a20 &^= b20\n=> a20 = %d (%08b)\n\n", a20, a20)

	// 21) <<(비트를 왼쪽으로 이동) 현재 값의 비트를 특정 횟수만큼 왼쪽으로 이동, 사용할 수 있는 자료형은 정수
	a21 := 7        // 00000111
	b21 := a21 << 2 // 00011100 : a21의 비트를 왼쪽으로 2번 이동
	fmt.Printf("a21 = %d (%08b)\n", a21, a21)
	fmt.Printf("b21 : a21 << 2\n        => %d (%08b)\n\n", b21, b21)

	// 22) >>(비트를 오른쪽으로 이동) 현재 값의 비트를 특정 횟수만큼 오른쪽으로 이동, 사용할 수 있는 자료형은 정수
	a22 := 112      // 01110000
	b22 := a22 >> 3 // 00001110 : a22의 비트를 오른쪽으로 3번 이동
	fmt.Printf("a22 = %d (%08b)\n", a22, a22)
	fmt.Printf("b22 : a22 >> 3\n        => %d (%08b)\n\n", b22, b22)

	// 23) <<=(비트를 왼쪽으로 이동 후 대입) 현재 변수를 특정 횟수만큼 왼쪽으로 이동한 다음 다시 변수에 대입
	a23 := 7 // 00000111
	fmt.Printf("a23 = %d (%08b)\n", a23, a23)
	a23 <<= 2 // 00011100 : a23의 비트를 왼쪽으로 2번 이동
	fmt.Printf("a23 <<= 2\n=> a23 = %d (%08b)\n\n", a23, a23)

	// 24) >>=(비트를 오른쪽으로 이동 후 대입) 현재 변수를 특정 횟수만큼 오른쪽으로 이동한 다음 다시 변수에 대입
	a24 := 112 // 01110000
	fmt.Printf("a24 = %d (%08b)\n", a24, a24)
	a24 >>= 3 // 00001110 : a24의 비트를 오른쪽으로 3번 이동
	fmt.Printf("a24 >>= 3\n=> a24 = %d (%08b)\n\n", a24, a24)

	// 25) ^(비트 반전/단항) 비트를 반전(Bitwise complement,1의 보수)
	var a25 uint8 = 3 // 00000011
	fmt.Printf("a25 = %d (%08b)\n", a25, a25)
	b25 := ^a25 // 11111100 : a25의 비트를 반전시킴
	fmt.Printf("b25 : ^a25 = %d (%08b)\n\n", b25, b25)

	// 26) +(양수 부호/단항) 값에 양수 부호
	a26 := 3
	b26 := -2
	c26 := +a26 // a26에 양수 부호를 붙임
	d26 := +b26 // b26에 양수 부호를 붙임
	fmt.Printf("a26 : %d\n", a26)
	fmt.Printf("b26 : %d\n", b26)
	fmt.Printf("c26 : +a26 = %d\n", c26)   // 3 : +(3)
	fmt.Printf("d26 : +b26 = %d\n\n", d26) // -2 : +(-2)

	// 27) -(음수 부호/단항) 값에 음수 부호
	a27 := 3
	b27 := -2
	c27 := -a27 // a27에 음수 부호를 붙임
	d27 := -b27 // b27에 음수 부호를 붙임
	fmt.Printf("a27 : %d\n", a27)
	fmt.Printf("b27 : %d\n", b27)
	fmt.Printf("c27 : -a27 = %d\n", c27)   // -3 : -(3)
	fmt.Printf("d27 : -b27 = %d\n\n", d27) // 2 : -(-2)

	/**
	 *	연산자 우선 순위(숫자가 높을 수록 먼저 계산)
	 *	5 : *  /  %  <<  >>  &  &^
	 *	4 : +  -  |  ^
	 *	3 : ==  !=  <  <=  >  >=
	 *	2 : &&
	 *	1 : ||
	 */

}
